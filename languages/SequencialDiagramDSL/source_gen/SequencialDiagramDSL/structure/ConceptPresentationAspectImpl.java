package SequencialDiagramDSL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Actor;
  private ConceptPresentation props_Alt;
  private ConceptPresentation props_AltAndElse;
  private ConceptPresentation props_AsyncFunction;
  private ConceptPresentation props_Entity;
  private ConceptPresentation props_Event;
  private ConceptPresentation props_Function;
  private ConceptPresentation props_Loop;
  private ConceptPresentation props_Model;
  private ConceptPresentation props_NewObjectFunction;
  private ConceptPresentation props_Object;
  private ConceptPresentation props_ObjectInstance;
  private ConceptPresentation props_Structure;
  private ConceptPresentation props_SyncFunction;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Actor:
        if (props_Actor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Actor = cpb.create();
        }
        return props_Actor;
      case LanguageConceptSwitch.Alt:
        if (props_Alt == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Alt");
          props_Alt = cpb.create();
        }
        return props_Alt;
      case LanguageConceptSwitch.AltAndElse:
        if (props_AltAndElse == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AltAndElse");
          props_AltAndElse = cpb.create();
        }
        return props_AltAndElse;
      case LanguageConceptSwitch.AsyncFunction:
        if (props_AsyncFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AsyncFunction = cpb.create();
        }
        return props_AsyncFunction;
      case LanguageConceptSwitch.Entity:
        if (props_Entity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Entity = cpb.create();
        }
        return props_Entity;
      case LanguageConceptSwitch.Event:
        if (props_Event == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Event = cpb.create();
        }
        return props_Event;
      case LanguageConceptSwitch.Function:
        if (props_Function == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Function = cpb.create();
        }
        return props_Function;
      case LanguageConceptSwitch.Loop:
        if (props_Loop == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Loop");
          props_Loop = cpb.create();
        }
        return props_Loop;
      case LanguageConceptSwitch.Model:
        if (props_Model == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Model = cpb.create();
        }
        return props_Model;
      case LanguageConceptSwitch.NewObjectFunction:
        if (props_NewObjectFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_NewObjectFunction = cpb.create();
        }
        return props_NewObjectFunction;
      case LanguageConceptSwitch.Object:
        if (props_Object == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Object = cpb.create();
        }
        return props_Object;
      case LanguageConceptSwitch.ObjectInstance:
        if (props_ObjectInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ObjectInstance");
          props_ObjectInstance = cpb.create();
        }
        return props_ObjectInstance;
      case LanguageConceptSwitch.Structure:
        if (props_Structure == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Structure = cpb.create();
        }
        return props_Structure;
      case LanguageConceptSwitch.SyncFunction:
        if (props_SyncFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SyncFunction = cpb.create();
        }
        return props_SyncFunction;
    }
    return null;
  }
}
